snippet import
options head
	import ${0:#:name} from '${1:#:module_name}';

snippet class
options head
	class ${1:#:name} {
		constructor (${2:#:arguments}) {
			${0:TARGET}
		}
	}

snippet extends
options word
	extends ${0:#:parent_class_name}

snippet super
options word
	super(${0:#:arguments});

snippet arrow_function
options word
	(${1}) => {
		${0:TARGET}
	}

snippet function
options word
	function ${1:#:name}(${2:#:arguments}) {
		${0:TARGET}
	}

snippet if
options head
	if (${1:#:condition}) {
		${0:TARGET}
	}

snippet elseif
options word
	else if (${1:#:condition}) {
		${0:TARGET}
	}

snippet else
options word
	else {
		${0:TARGET}
	}

snippet for
options head
	for (let ${1:i}=0; $1 < ${2:#:Array}.length; ++$1) {
		${0:TARGET}
	}

snippet for_in
options head
	for (let ${1:i} in ${2:#:Array}) {
		${0:TARGET}
	}

snippet for_of
options head
	for (let ${1:i} of ${2:#:Array}) {
		${0:TARGET}
	}

snippet while
options head
	while (${1:#:condition}) {
		${0:TARGET}
	}

snippet do_while
options head
	do {
		${0:TARGET}
	} while (${1:#:condition})

snippet switch
options head indent
	switch (${1:#:var}) {
		case ${2:#:val}:
			${0:TARGET}
			break;
	}

snippet case
options head indent
	case ${1:#:val}:
		${0:TARGET}
		break;

snippet try_catch
options head
	try {
		${1:TARGET}
	} catch (err) {
		${2:// handle error}
	}

snippet try_catch_finally
options head
	try {
		${1:TARGET}
	} catch (err) {
		${2:// handle error}
	} finally {
		${3}
	}

snippet finally
options word
	finally {
		${0:TARGET}
	}

snippet throw_new_error
options word
	throw new Error('${0:TARGET}')

snippet use_strict
options head
	'use strict';