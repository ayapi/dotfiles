let g:funcsnips.vim=[
\'abs(${1:expr})',
\'acos(${1:expr})',
\'add(${1:list}, ${2:expr})',
\'and(${1:expr}, ${2:expr})',
\'append(${1:lnum}, ${2:expr})',
\'arglistid(${1:${2:winnr\}${3:, ${4:tabnr\\}\}})',
\'argv(${1:#:nr})',
\'asin(${1:expr})',
\'atan(${1:expr})',
\'atan2(${1:expr1}, ${2:expr2})',
\'browse(${1:save}, ${2:title}, ${3:initdir}, ${4:default})',
\'browsedir(${1:title}, ${2:initdir})',
\'bufexists(${1:expr})',
\'buflisted(${1:expr})',
\'bufloaded(${1:expr})',
\'bufname(${1:expr})',
\'bufnr(${1:expr}${2:, ${3:create\}})',
\'bufwinnr(${1:expr})',
\'byte2line(${1:byte})',
\'byteidx(${1:expr}, ${2:nr})',
\'byteidxcomp(${1:expr}, ${2:nr})',
\'call(${1:func}, ${2:arglist}${3:, ${4:dict\}})',
\'ceil(${1:expr})',
\'char2nr(${1:expr}${2:, ${3:utf8\}})',
\'cindent(${1:lnum})',
\'col(${1:expr})',
\'complete(${1:startcol}, ${2:matches})',
\'complete_add(${1:expr})',
\'confirm(${1:msg}${2:, ${3:choices\}${4:, ${5:default\\}${6:, ${7:type\\\}\\}\}})',
\'copy(${1:expr})',
\'cos(${1:expr})',
\'cosh(${1:expr})',
\'count(${1:comp}, ${2:expr}${3:, ${4:ic\}${5:, ${6:start\\}\}})',
\'cscope_connection(${1:${2:num\}${3:dbpath\}${4:, ${5:prepend\\}\}})',
\'cursor(${1:lnum}, ${2:col}${3:, ${4:off\}})',
\'cursor(${1:list})',
\'deepcopy(${1:expr}${2:, ${3:noref\}})',
\'delete(${1:fname})',
\'dictwatcheradd(${1:dict}, ${2:pattern}, ${3:callback})',
\'dictwatcherdel(${1:dict}, ${2:pattern}, ${3:callback})',
\'diff_filler(${1:lnum})',
\'diff_hlID(${1:lnum}, ${2:col})',
\'empty(${1:expr})',
\'escape(${1:string}, ${2:chars})',
\'eval(${1:string})',
\'executable(${1:expr})',
\'exepath(${1:expr})',
\'exists(${1:expr})',
\'exp(${1:expr})',
\'expand(${1:expr}${2:, ${3:nosuf\}${4:, ${5:list\\}\}})',
\'extend(${1:expr1}, ${2:expr2}${3:, ${4:expr3\}})',
\'feedkeys(${1:string}${2:, ${3:mode\}})',
\'filereadable(${1:file})',
\'filewritable(${1:file})',
\'filter(${1:expr}, ${2:string})',
\'finddir(${1:name}${2:, ${3:path\}${4:, ${5:count\\}\}})',
\'findfile(${1:name}${2:, ${3:path\}${4:, ${5:count\\}\}})',
\'float2nr(${1:expr})',
\'floor(${1:expr})',
\'fmod(${1:expr1}, ${2:expr2})',
\'fnameescape(${1:string})',
\'fnamemodify(${1:fname}, ${2:mods})',
\'foldclosed(${1:lnum})',
\'foldclosedend(${1:lnum})',
\'foldlevel(${1:lnum})',
\'foldtextresult(${1:lnum})',
\'function(${1:name})',
\'garbagecollect(${1:#:atexit})',
\'get(${1:list}, ${2:idx}${3:, ${4:default\}})',
\'get(${1:dict}, ${2:key}${3:, ${4:default\}})',
\'getbufline(${1:expr}, ${2:lnum}${3:, ${4:end\}})',
\'getbufvar(${1:expr}, ${2:varname}${3:, ${4:def\}})',
\'getchar(${1:#:expr})',
\'getfsize(${1:fname})',
\'getfontname(${1:#:name})',
\'getfperm(${1:fname})',
\'getftime(${1:fname})',
\'getftype(${1:fname})',
\'getline(${1:lnum}${2:, ${3:end\}})',
\'getloclist(${1:nr})',
\'getpos(${1:expr})',
\'getreg(${1:${2:regname\}${3:, ${4:1\\}${5:, ${6:list\\\}\\}\}})',
\'getregtype(${1:#:regname})',
\'gettabvar(${1:tabnr}, ${2:varname}${3:, ${4:def\}})',
\'gettabwinvar(${1:tabnr}, ${2:winnr}, ${3:varname}${4:, ${5:def\}})',
\'getwinvar(${1:winnr}, ${2:varname}${3:, ${4:def\}})',
\'glob(${1:expr}${2:, ${3:nosuf\}${4:, ${5:list\\}\}})',
\'glob2regpat(${1:expr})',
\'globpath(${1:path}, ${2:expr}${3:, ${4:nosuf\}${5:, ${6:list\\}\}})',
\'has(${1:feature})',
\'has_key(${1:dict}, ${2:key})',
\'hasmapto(${1:what}${2:, ${3:mode\}${4:, ${5:abbr\\}\}})',
\'histadd(${1:history}, ${2:item})',
\'histdel(${1:history}${2:, ${3:item\}})',
\'histget(${1:history}${2:, ${3:index\}})',
\'histnr(${1:history})',
\'hlexists(${1:name})',
\'hlID(${1:name})',
\'iconv(${1:expr}, ${2:from}, ${3:to})',
\'indent(${1:lnum})',
\'index(${1:list}, ${2:expr}${3:, ${4:start\}${5:, ${6:ic\\}\}})',
\'input(${1:prompt}${2:, ${3:text\}${4:, ${5:completion\\}\}})',
\'inputdialog(${1:prompt}${2:, ${3:text\}${4:, ${5:cancelreturn\\}\}})',
\'inputlist(${1:textlist})',
\'inputsecret(${1:prompt}${2:, ${3:text\}})',
\'insert(${1:list}, ${2:item}${3:, ${4:idx\}})',
\'invert(${1:expr})',
\'isdirectory(${1:directory})',
\'islocked(${1:expr})',
\'items(${1:dict})',
\'jobclose(${1:job}${2:, ${3:stream\}})',
\'jobresize(${1:job}, ${2:width}, ${3:height})',
\'jobsend(${1:job}, ${2:data})',
\'jobstart(${1:cmd}${2:, ${3:opts\}})',
\'jobstop(${1:job})',
\'jobwait(${1:ids}${2:, ${3:timeout\}})',
\'join(${1:list}${2:, ${3:sep\}})',
\'keys(${1:dict})',
\'len(${1:expr})',
\'libcall(${1:libname}, ${2:funcname}, ${3:argument})',
\'libcallnr(${1:libname}, ${2:funcname}, ${3:argument})',
\'line(${1:expr})',
\'line2byte(${1:lnum})',
\'lispindent(${1:lnum})',
\'log(${1:expr})',
\'log10(${1:expr})',
\'map(${1:expr}, ${2:string})',
\'maparg(${1:name}${2:, ${3:mode\}${4:, ${5:abbr\\}${6:, ${7:dict\\\}\\}\}})',
\'mapcheck(${1:name}${2:, ${3:mode\}${4:, ${5:abbr\\}\}})',
\'match(${1:expr}, ${2:pat}${3:, ${4:start\}${5:, ${6:count\\}\}})',
\'matchadd(${1:group}, ${2:pattern}${3:, ${4:priority\}${5:, ${6:id\\}\}})',
\'matchaddpos(${1:group}, ${2:pos}${3:, ${4:priority\}${5:, ${6:id\\}\}})',
\'matcharg(${1:nr})',
\'matchdelete(${1:id})',
\'matchend(${1:expr}, ${2:pat}${3:, ${4:start\}${5:, ${6:count\\}\}})',
\'matchlist(${1:expr}, ${2:pat}${3:, ${4:start\}${5:, ${6:count\\}\}})',
\'matchstr(${1:expr}, ${2:pat}${3:, ${4:start\}${5:, ${6:count\\}\}})',
\'max(${1:list})',
\'min(${1:list})',
\'mkdir(${1:name}${2:, ${3:path\}${4:, ${5:prot\\}\}})',
\'mode(${1:#:expr})',
\'msgpackdump(${1:list})',
\'msgpackparse(${1:list})',
\'nextnonblank(${1:lnum})',
\'nr2char(${1:expr}${2:, ${3:utf8\}})',
\'or(${1:expr}, ${2:expr})',
\'pathshorten(${1:expr})',
\'pow(${1:x}, ${2:y})',
\'prevnonblank(${1:lnum})',
\'printf(${1:fmt}, ${2:expr1}, ${3:...})',
\'py3eval(${1:expr})',
\'pyeval(${1:expr})',
\'range(${1:expr}${2:, ${3:max\}${4:, ${5:stride\\}\}})',
\'readfile(${1:fname}${2:, ${3:binary\}${4:, ${5:max\\}\}})',
\'reltime(${1:${2:start\}${3:, ${4:end\\}\}})',
\'reltimestr(${1:time})',
\'remote_expr(${1:server}, ${2:string}${3:, ${4:idvar\}})',
\'remote_foreground(${1:server})',
\'remote_peek(${1:serverid}${2:, ${3:retvar\}})',
\'remote_read(${1:serverid})',
\'remote_send(${1:server}, ${2:string}${3:, ${4:idvar\}})',
\'remove(${1:list}, ${2:idx}${3:, ${4:end\}})',
\'remove(${1:dict}, ${2:key})',
\'rename(${1:from}, ${2:to})',
\'repeat(${1:expr}, ${2:count})',
\'resolve(${1:filename})',
\'reverse(${1:list})',
\'round(${1:expr})',
\'rpcnotify(${1:channel}, ${2:event}${3:, ${4:args...\}})',
\'rpcrequest(${1:channel}, ${2:method}${3:, ${4:args...\}})',
\'rpcstart(${1:prog}${2:, ${3:argv\}})',
\'rpcstop(${1:channel})',
\'screenattr(${1:row}, ${2:col})',
\'screenchar(${1:row}, ${2:col})',
\'search(${1:pattern}${2:, ${3:flags\}${4:, ${5:stopline\\}${6:, ${7:timeout\\\}\\}\}})',
\'searchdecl(${1:name}${2:, ${3:global\}${4:, ${5:thisblock\\}\}})',
\'searchpair(${1:start}, ${2:middle}, ${3:end}${4:, ${5:flags\}${6:, ${7:skip\\}${8:, ${9:stopline\\\}${10:, ${11:timeout\\\\}\\\}\\}\}})',
\'searchpairpos(${1:start}, ${2:middle}, ${3:end}${4:, ${5:flags\}${6:, ${7:skip\\}${8:, ${9:stopline\\\}${10:, ${11:timeout\\\\}\\\}\\}\}})',
\'searchpos(${1:pattern}${2:, ${3:flags\}${4:, ${5:stopline\\}${6:, ${7:timeout\\\}\\}\}})',
\'server2client(${1:clientid}, ${2:string})',
\'serverstart(${1:#:address})',
\'serverstop(${1:address})',
\'setbufvar(${1:expr}, ${2:varname}, ${3:val})',
\'setcmdpos(${1:pos})',
\'setline(${1:lnum}, ${2:text})',
\'setloclist(${1:nr}, ${2:list}${3:, ${4:action\}})',
\'setmatches(${1:list})',
\'setpos(${1:expr}, ${2:list})',
\'setqflist(${1:list}${2:, ${3:action\}})',
\'setreg(${1:regname}, ${2:value}${3:, ${4:options\}})',
\'settabvar(${1:tabnr}, ${2:varname}, ${3:val})',
\'settabwinvar(${1:tabnr}, ${2:winnr}, ${3:varname}, ${4:val})',
\'setwinvar(${1:nr}, ${2:varname}, ${3:val})',
\'sha256(${1:string})',
\'shellescape(${1:string}${2:, ${3:special\}})',
\'simplify(${1:filename})',
\'sin(${1:expr})',
\'sinh(${1:expr})',
\'sort(${1:list}${2:, ${3:func\}${4:, ${5:dict\\}\}})',
\'soundfold(${1:word})',
\'spellbadword(${1:#:sentence})',
\'spellsuggest(${1:word}${2:, ${3:max\}${4:, ${5:capital\\}\}})',
\'split(${1:expr}${2:, ${3:pattern\}${4:, ${5:keepempty\\}\}})',
\'sqrt(${1:expr})',
\'str2float(${1:expr})',
\'str2nr(${1:expr}${2:, ${3:base\}})',
\'strchars(${1:expr})',
\'strdisplaywidth(${1:expr}${2:, ${3:col\}})',
\'strftime(${1:format}${2:, ${3:time\}})',
\'stridx(${1:haystack}, ${2:needle}${3:, ${4:start\}})',
\'string(${1:expr})',
\'strlen(${1:expr})',
\'strpart(${1:src}, ${2:start}${3:, ${4:len\}})',
\'strridx(${1:haystack}, ${2:needle}${3:, ${4:start\}})',
\'strtrans(${1:expr})',
\'strwidth(${1:expr})',
\'submatch(${1:nr}${2:, ${3:list\}})',
\'substitute(${1:expr}, ${2:pat}, ${3:sub}, ${4:flags})',
\'synID(${1:lnum}, ${2:col}, ${3:trans})',
\'synIDattr(${1:synID}, ${2:what}${3:, ${4:mode\}})',
\'synIDtrans(${1:synID})',
\'synconcealed(${1:lnum}, ${2:col})',
\'synstack(${1:lnum}, ${2:col})',
\'system(${1:cmd}${2:, ${3:input\}})',
\'systemlist(${1:cmd}${2:, ${3:input\}${4:, ${5:keepempty\\}\}})',
\'tabpagebuflist(${1:#:arg})',
\'tabpagenr(${1:#:arg})',
\'tabpagewinnr(${1:tabarg}${2:, ${3:arg\}})',
\'taglist(${1:expr})',
\'termopen(${1:cmd}${2:, ${3:opts\}})',
\'tan(${1:expr})',
\'tanh(${1:expr})',
\'tolower(${1:expr})',
\'toupper(${1:expr})',
\'tr(${1:src}, ${2:fromstr}, ${3:tostr})',
\'trunc(${1:expr})',
\'type(${1:expr})',
\'undofile(${1:name})',
\'uniq(${1:list}${2:, ${3:func\}${4:, ${5:dict\\}\}})',
\'values(${1:dict})',
\'virtcol(${1:expr})',
\'visualmode(${1:#:expr})',
\'winbufnr(${1:nr})',
\'winheight(${1:nr})',
\'winnr(${1:#:arg})',
\'winrestview(${1:dict})',
\'winwidth(${1:nr})',
\'writefile(${1:list}, ${2:fname}${3:, ${4:flags\}})',
\'xor(${1:expr}, ${2:expr})']
