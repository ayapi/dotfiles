#
# this is ayapi's custom theme
# based on "paradox theme"
# 
# Authors(paradox theme):
#   Isaac Wolkerstorfer <i@agnoster.net>
#   Jeff Sandberg <paradox460@gmail.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com
#

# Load dependencies.

# Define variables.
# _prompt_ayapi_current_bg='NONE'
# _prompt_ayapi_segment_separator=''
# _prompt_ayapi_start_time=$SECONDS

# prompt_ayapi_start_segment() {
#   local bg fg
#   [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
#   [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
#   if [[ "$_prompt_ayapi_current_bg" != 'NONE' && "$1" != "$_prompt_ayapi_current_bg" ]]; then
#     print -n " $bg%F{$_prompt_ayapi_current_bg}$_prompt_ayapi_segment_separator$fg "
#   else
#     print -n "$bg$fg "
#   fi
#   _prompt_ayapi_current_bg="$1"
#   [[ -n "$3" ]] && print -n "$3"
# }

# prompt_ayapi_end_segment() {
#   if [[ -n "$_prompt_ayapi_current_bg" ]]; then
#     print -n " %k%F{$_prompt_ayapi_current_bg}$_prompt_ayapi_segment_separator"
#   else
#     print -n "%k"
#   fi
#   print -n "%f"
#   _prompt_ayapi_current_bg=''
# }

prompt_ayapi_build_prompt() {  
  print -n "%(?::%F{red}${(l:$_prompt_ayapi_cols::✘:)}%f%{\n%})%(!:%F{yellow}${(l:$_prompt_ayapi_cols::⚡:)}%f%{\n%}:)%(1j:%F{cyan}${(l:$_prompt_ayapi_cols::⚙:)}%f%{\n%}:)"

  local _head=" %n@%m%f "

  print -n "%{\e[38;5;0;48;5;170m%}"
  print -n $_head
  print -n "%{\e[m%}%{\e[38;5;0;48;5;170m%}%{\e[m%}"

  local zero='%([BSUbfksu]|([FB]|){*})'
  local _head_len=${#${(S%%)_head//$~zero/}}
  ((_head_len = _head_len + 1))

  # current working directory
  # i want to see long path always
  local _cwd_max_len
  ((_cwd_max_len = $_prompt_ayapi_cols - 12 - $_head_len))
  
  print -n "%K{black}"
  print -n "%F{white}"

  if [[ ${#_prompt_ayapi_pwd} -gt $_cwd_max_len ]]; then
    print -n " ...${(l:(($_cwd_max_len - 3)):)_prompt_ayapi_pwd}"
  else
    print -n " ${(r:$_cwd_max_len:: :)_prompt_ayapi_pwd}"
  fi
  print -n " %k%f"

  # clock
  print -n "%K{white}"
  print -n "%F{black}"
  print -n " %D{%H:%M:%S}"
  print -n " %k%f"
  
  # if [[ -n "$git_info" ]]; then
  #   prompt_ayapi_start_segment green black '${(e)git_info[ref]}${(e)git_info[status]}'
  # fi

  #prompt_ayapi_end_segment
}

# prompt_ayapi_print_elapsed_time() {
#   local end_time=$(( SECONDS - _prompt_ayapi_start_time ))
#   local hours minutes seconds remainder
#
#   if (( end_time >= 3600 )); then
#     hours=$(( end_time / 3600 ))
#     remainder=$(( end_time % 3600 ))
#     minutes=$(( remainder / 60 ))
#     seconds=$(( remainder % 60 ))
#     print -P "%B%F{red}>>> elapsed time ${hours}h${minutes}m${seconds}s%b"
#   elif (( end_time >= 60 )); then
#     minutes=$(( end_time / 60 ))
#     seconds=$(( end_time % 60 ))
#     print -P "%B%F{yellow}>>> elapsed time ${minutes}m${seconds}s%b"
#   elif (( end_time > 10 )); then
#     print -P "%B%F{green}>>> elapsed time ${end_time}s%b"
#   fi
# }

prompt_ayapi_precmd() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_ayapi_pwd="${PWD/#$HOME/~}"
  
  # column length
  _prompt_ayapi_cols=$COLUMNS

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Calculate and print the elapsed time.
  # prompt_ayapi_print_elapsed_time
}

prompt_ayapi_preexec() {
 # _prompt_ayapi_start_time="$SECONDS"
}

prompt_ayapi_setup() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_ayapi_preexec
  add-zsh-hook precmd prompt_ayapi_precmd

  # Define prompts.
  PROMPT='
${(e)$(prompt_ayapi_build_prompt)}
 > '
  # RPROMPT='%F{blue}[%F{green}%D{%H:%M:%S}%F{blue}]%f'
  SPROMPT='zsh: %F{red}%R%f って、もしかして %F{green}%r%f のこと？[nyae] '
}

prompt_ayapi_setup "$@"
